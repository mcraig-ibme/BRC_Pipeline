"""
Install script for BRC pipeline
"""
import os
import sys

SRCDIR = os.path.dirname(sys.argv[0])

def brcfile(name):
    return os.path.join(SRCDIR, name)

def brcfile_read(name):
    with open(brcfile(name), encoding="utf-8") as f:
        return f.read()

def writable_dir(prompt, default):
    response = input(f"{prompt} [{default}]").strip()
    if not response:
        response = default
    parent_dir = os.path.dirname(response)
    # FIXME test if parent writable
    if os.path.exists(response):
        raise ValueError(f"Specified directory {response} already exists")
    try:
        os.makedirs(response)
        return response
    except IOError:
        raise ValueError(f"You do not have permission to write to the directory {response}")

def dir_exists(prompt, default, *check_files):
    response = input(f"{prompt} [{default}]").strip()
    if not response:
        response = default
    if not os.path.isdir(response):
        raise ValueError(f"Specified directory {response} does not exist or is not a directory")
    for f in check_files:
        if not os.path.exists(os.path.join(response, f)):
            raise ValueError(f"Expected file {f} not found in directory {response}")
    return response

def yesno(prompt, default):
    response = input(f"{prompt} [{default}]").strip().lower()
    return response in ("y", "yes")

brc_files = ["version.txt", "product.txt"]
for f in brc_files:
    if not os.path.exists(brcfile(f)):
        raise ValueError(f"Couldn't find expected BRC pipeline file: {f} - it should be in the same folder as this script")

product = brcfile_read("product.txt")
version = brcfile_read("version.txt")
if product.lower() != "brc pipeline":
    raise ValueError(f"Contents of product.txt file did not contain 'BRC pipeline'")

print(f"BRC Pipeline installer {version}\n")

clustermode = yesno("Are you installing the BRC pipeline on a cluster with queueing system (e.g. Slurm)?", "No")
fsldir = dir_exists("Location of FSL installation", "/usr/local/fsl", "bin/fslmaths")
fsdir = dir_exists("Location of Freesurfer installation", "")
matlabdir = dir_exists("Location of Matlab installation", "/usr/local/matlab")
spmdir = dir_exists("Location of SPM installation", "/usr/local/SPM/spm12")
dvarsdir = dir_exists("Location of DVARS installation", "/usr/local/DVARS")
antsdir = dir_exists("Location of ANTS installation", "/usr/local/ANTs")
c3ddir = dir_exists("Location of C3D installation", "/usr/local/c2d")
cudimotdir = dir_exists("Location of CUDIMOT installation", "/usr/local/cudimot")

destdir_default = "/usr/local/BRC_Pipeline"
destdir = writable_dir("Installation directory for BRC pipeline", destdir_default)

pipelines = {
    "structural_pipeline" : "SCTRUC", # FIXME is this a typo?
    "diffusion_pipeline" : "DMRI",
    "functional_pipeline" : "fMRI",
    "perfusion_pipeline" : "PMRI",
    "func_group_analysis" : "FMRI_GP",
    "IDP_extraction" : "IDPEXTRACT",
    "global", "GLOBAL",
}

setup_script = os.path.join(destdir, "SetUpBRCPipeline.sh")
with open(setup_script, "w") as setup:

    setup.write('#!/usr/bin/env bash\n')
    setup.write('# Setup script for BRC pipeline\n')
    setup.write('# Autogenerated by brc_install.py\n') # FIXME timestamp
    setup.write('# Copyright 2018 University of Nottingham'\n)

    cluster = "YES" if clustermode else "NO"
    setup.write('export CLUSTER_MODE="{clustermode}"\n')

    if not clustermode:
        # Setup FSL (if not already done so in the running environment)
        setup.write('export FSLDIR="{fsldir}"\n')
        setup.write('. $FSLDIR/etc/fslconf/fsl.sh\n')
        setup.write('export FSLCONFDIR=${FSLDIR}/config\n')
        setup.write('export FSLOUTPUTTYPE="NIFTI_GZ"\n')

        # Setup FreeSurfer (if not already done so in the running environment)
        setup.write('export FREESURFER_HOME="{fsdir}"\n')
        setup.write('source $FREESURFER_HOME/SetUpFreeSurfer.sh\n')

        setup.write('export MATLABpath="{matlabdir}"\n')
        #setup.write('export FSLDIR_5_0_11="/usr/local/fsl-5.0.11"

        #SET DYNAMIC LIBRARIES FOR Eddy FIXME
        #setup.write('export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64               #TO BE MODIFIED BY USER

    setup.write(f'export BRCDIR="{destdir}"\n')
    for name, env in pipelines.items():
        subdir = f"BRC_{name}"
        print('Copying pipeline: {subdir}')
        setup.write(f'export BRC_{env}_DIR="${{BRCDIR}}/{subdir}"\n')
        setup.write(f'export BRC_{env}_SCR="${{BRC_{env}_DIR}}/scripts"\n')
        shutil.copy

    # SETUP MATLAB and LIBRARIES
    setup.write('export SPMpath="{spmdir}"\n') # Functional pipeline - slice timing correction
    setup.write('export DVARSpath="{dvarsdir}"\n') # Functional pipeline - QC
    setup.write('export ANTSPATH="{antsdir}"\n') # Structural pipeline
    setup.write('export C3DPATH="{c3ddir}"\n') # Structural pipeline
    setup.write('export CUDIMOT="{cudimotdir}"\n') # FIXME not used???

    setup.write('PATH=$PATH:$BRC_SCTRUC_DIR:$BRC_DMRI_DIR:$BRC_FMRI_DIR:$BRC_PMRI_DIR:$BRC_FMRI_GP_DIR:$BRC_IDPEXTRACT_DIR\n')
    setup.write('export PATH\n')
